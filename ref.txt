Week1 - 
    - Core Java - oops, collections, exceptions, threading, io
    - JDBC 
    - JPA 
    - Servlet
    - Spring Core 
    - Spring MVC 
    - Spring Data JPA 
    - Spring Data REST 
    - Spring Boot 

Week2 
    - Spring Security 
    - Microservices 
    - AWS 
week3
    - Misc 

Week4 
    - HTML, CSS, JS, Typescript 
    - Angular 

language                    library                     framework 

Java                                                    spring 
C#                                                      .net framework 
javascript                  react                       angular
Python                                                  django                                



Java7, 8, 9, 15...

Programming language 

Platform - runtime environment 

Standard libraries 



JDBC API
-----------
    - Specification / set of interfaces which defines how to access a database 


    - JDBC Drivers 

    - java.sql and javax.sql packages 


    JavaApplication ---> JDBC API -----> JDBC Driver -----> database 


    JDBC API - Appication to JDBC manager Connection 
    JDBC Driver API - JDBC Manager -- Driver Connection



        Class.forName("driverclass")


        DriverManager 
            - getConnection()
            - getDrivers()




    JDBC 

            - load the drivers 
            - establish the connection 

                 Connection conection =    DriverManager.getConnection("","","");

            - create Statement object 

                - Statement 
                      Statement stmt =   connection.createStatement()

                        int result = stmt.executeUpdate("sqlcommand")       //insert/udpate/delete

                         int result = stmt.executeUpdate("INSERT INTO employee values('"+empname+"', '"+city+"', 1000.00)") 

                        ResultSet rs =  stmt.executeQuery("sqlcommand")

                        boolean result =  stmt.execute("sqlcommand")

                    - the sqlcommand is compiled everytime at db side
                    - slower if consecutive execution of same query 
                    - statement object can be only used to execute "string based" sql queries 

                    -** Statement object is suitable for CREATE, Alter, Drop tables 
                            -- good for DDL Queries 

                    -** statement object can't be used for storing & retrieving binary data i.e. arrays, files etc. 
                    -** with statement object, it is "vulnerable to SQL Injections" 

                        string ename = "---"
                        String query = "INSERT INTO employees (id, name) values(1, '"+ename+"')"


                - PreparedStatement 
                    - PS  object can be only used to execute "parameterized" sql queries 

                     String query = "INSERT INTO employees (id, name) values(?,?)"; 

                     PreparedStatement ps = connection.prepareStatement(query)

                --** it has methods to bind various object types 
                        ps.setXXXXX(placeholderindex, value)
                --** it protects against "SQL Injections"
                --** uses pre-compilations 
                --** speeds up the communication between database and jvm 
                --** PS provides "batch" execution during single db connection 
                --** PS is good for DML queries 


                - CallableStatement 




            - Execute the statement / db commands 
            - close connection 


            - Batch Processing in JDBC 


JDBC 


Object Persistence 
    - state of an object can be stored in data store, and re-created at a later point of time 
    - you can persist the data in files/relational databases 




ORM - object relation mapping tools 
    - Map the Object Model to Relational model 
    - ORM is a technique to map the representation of data from java objects to relational database tables (and vise versa) 
    - this mapping is done either using xml or annotations 
    - hides the complexity to deal with sql and low level jdbc api 


    Hibernate                           Hibernate JPA 

    Ibatis                              MyBatis

    TopLink                             EclipseLink


Hibernate xml configuration
------------------------------
    <hibernate-configuration>
        <session-factory>
                //..db configuration
        </session-factory>
    </hibernate-configuration>


JPA - Java Persistence API 
---------------------------------
    - standard specification for object mapping 

 
JPA Providers 
---------------
    - implementation of jpa 

    - Hibernate JPA
    - MyBatis
    - EclipseLink


Entity 
------------
    - Entity represents the data to be persisted, queried, or the data to be manipulated 
             - Java Object --> just instance of a class 
    - Entities are objects which are persisted / managed by the EntityManager 

    - must have no-arg constructor 
    - must have identifier column marked with @Id annotation
    - can be concrete or abstract class 
    - enums or interfaces cannot be entities 
    - all attributes of the entity class become persistent by default 

    @Entity
    class Book {

        @Id
        private long id; 
        private String title; 

        //constructor 
        //getter/setter 
        
    }

EntityManager
---------------
    - object which manages PersistenceContext 
    - EntityManager object is used to persist the Entities 

                                                  Persistence 
                                                        |
        persistence.xml                             (create)
            |                                            |
        PersistentUnit                         EntityManagerFactory
            |                                            |
         (Configuredby)                              (creates)
            |                                           |
         PersistenceContext<------- (manages)------"EntityManager"


PersistenceContext 


PersistentUnit 
    - a named configuration of a set of entities 

   <persistence-unit name="jpademo1">

	</persistence-unit>


Default Mapping 

    - by default the table name is similar to the entity class name 
    - column names in the table will be similar to attribute names 
    - jdbc rules applied for mapping java primitives to relational data types 
            - string    = varchar(255)
            - long      = bigint 
            - boolean   = smallint 
            - enums     = integer

Custom Mapping 

    - @Table(name="new_table_name", schema="xxxxxx")
    - @Column(name="column_name", length="300", nullable=true)
    - @Temporal(TemporalType.DATE)

    - @GeneratedValue(strategy="xxxx")
        - GenerationType.SEQUENSE 
        - GenerationType.IDENTITY 
        - GenerationType.TABLE 
        - GenerationType.AUTO


CRUD operations on Entity 


Transaction 


Relationships 

    Department      <----has-A------> Employee

    class Department {                      class Employee {
        int deptId;                                 /...
        String deptName;                            /....
                                                    @OneToOne
        ....                                        Department dept;
        @OneToMany
        Set<Employee> employees;
    }                                       }

    deptTable
    -------------
    deptId          deptName  
    1               xxxxx   

    department_employee
    ---------------------
    department_deptId           employee_empId
    1                           1
    1                           2
    1                           3
   

    empTable                        //joinColumn
    ---------
    empId           empName         department_deptId
    1               xxx             1
    2               xxx             1
    3               xxx             2
    5               xxx             1





    Book           <----->       Author 



    Direction 

    Cardinality 


Default mapping strategy 
------------------------------

    @OneToOne           ---> Join column 
    @ManyToOne          ---> Join Column

    @OneToMany          ---> Join Table
    @ManyToMany         ---> Join Table 


    @Entity                                     @Entity 
    class Book {                                class Author {
        //..                                        //..
        //..                                        //...
        @OneToMany                                  //...
        List<Author> authors;                       
    }                                           }


        book -table                         author-table                book_author-table 
        -------



    Department  ---------> Employee




    @Entity                             @Entity 
    class Book {                        class Author {
        //..                                //..

        @OneToOne                           @OneToMany
        Author author;                      List<Book> books;

    }                                   }


    Book        1--->1      Author 

    Author      1--->*      Book



    book-table      
    --------------
    bookid          title       desc        author_id


    author-table 
    ----------------



    author_book 
    -------------
    author_id       book_id 



Cascade events 


Fetching relationships 

    - default fetch policy 
            @OneToOne       -- Eager 
            @OneToMany      -- Eager 

            @ManyToOne      - Lazy
            @ManyToMany     - Lazy 
    - custom fetch policy 


Inheritance in jpa 

    @Entity
    Class Product {
        int id;
        String title;
        String description;
        double unitCost;
    }

    @Entity                                         @Entity 
    class Book extend Product {                     class ElectronicProduct extends Product {

            String isbn;                                    //type
            int noOfPages;                                  //..
            Date publishedDate;                             //..

    }                                               }

    - JPA inheritance strategies 

                - single-table-per-class 
                        - all the entities in the hierarchy will be mapped to a single table 
                        - it will the sum of all the attributes in the entire entity hierarchy
                - joined-subclass 
                - table-per-concrete-class



quering the entities
    - JPQL
        - SQL --- SELECT *                                  SELECT i 
                  FROM item                                 FROM Item i
                  WHERE unitCost > 100.00                   WHERE i.unitCost > 100
                  ORDER BY title;                           ORDER BY i.title 

                  SELECT title, count(*) 
                  FROM item 
                    JOIN author 
                    on item.id = author.bookid 
                  GROUP BY item.title



                SELECT  <select-clause>
                FROM    <from-clause>
                [WHERE]
                [ORDER BY]
                [GROUP BY]
                [HAVING]


                FUNCTIONS   : AVG, COUNT, MAX, MIN, SUM 
                operators   : = < > <= >= <> NOT BETWEEN, NOT IN, NOT LIKE , LIKE, IS, NOT IS, EMPTY, NOT EMPTY, 


            EntityManager   
                - Query createQuery(String JPQLStatement)
                - TypedQuery createQuery(String jpql, Class class)
                - Query createNamedQuery(String jpql)
                - TypedQuery createNamedQuery(String jpql, Class class)


            Query 
                - getResultList()
                - getSingleResult()
                - setMaxResults()
                - setFirstResult() 
                - setParameter() 


    - custom jpql queries - named queries / dynamic queries 


    - native sql queries 
    - criteria api 
    - querydsl


JPA     - specification 

JPA Providers 
    - Hibernate, EclipseLink, MyBatics, OpenJpa 
    - implementation of JPA Specification 

Spring Data JPA 
    - abstraction over JPA Provider 
    - sophisticated support to build repositories 
    - pagination support, dynamic query execution, custom query methods 
    - 


Spring Data REST 


IOC 
-----------
    - IOC is a  principle in software programmingm, which delegates the responsibility of creating objects to the "Container"
        - decoupling the execution of the task 

    - Container 
        - container is a class which is responsible to create objects as per the "bean definition"
        - BeanFactory 
        - ApplicationContext 
            - ClassPathXmlApplicationContext 
            - FileSystemXmlApplicationContext 
            - AnnotationConfigApplicationContext 
            - XmlWebApplicationContext
            - AnnotationConfigWebApplicationContext 

    - "Container" which create objects

    - Spring Bean 
        - object which is managed by the container, instantiated by a container, 

    - "Spring Bean" Definition
        - xml configuration 
           
            <beans>
                <bean id="" name="" class=""  scope=""/>
            </beans>

        - java configuration 

                @Configuration
                class MyConfigation {

                    @Bean
                    public Employee createEmployee(){
                        return new Employee();
                    }
                }

        - annotations
            - @Component




    - "Dependency Injection" 


    - constructor injection 

                -   <bean id="employee" class="com.demo.Employee">
                            <constructor-arg>
                                    <value>somevalue</value>
                            </constructor-arg>
                            <constructor-arg value="" />
                    </bean>

                        - value 
                        - ref 
                        - list 
                        - set 
                        - array 
                        - bean

    - setter injection 
        <property>
                <value>1</value>
        </property>
        <property name="" value="" />

    - scope 
        - singleton 
        - prototype 
        - request 
        - session 
        - thread 



        class Employee {

            //...
            //..


            public Employee(int empid, string nm, ....){

            }

        }

        <bean>
                <constructor-arg name="" value="">
        </bean>




        1. define few beans based on the Dependencies you are going to download 
            - mysql-connector.jar
                - DataSource, TransactionManager, EntityManager   
                - DataSourceInitializer
                
                    - xml configuration / java configuration / spring boot auto configuration

            - spring-webmvc 
                - DispatcherServlet, 
            - spring-Security
            - spring-xxxxxx 
            - 3rd party jar/library/module 

        2. define beans for objects defined in service layer, DAO layer , controller layer etc.     
                  - xml configuration / java configuration / spring boot auto configuration



  interface Repository<T, ID> 
            |
            |
            |
   interface CrudRepository<T,ID>
            |
            |--> <S extends T> save(Entity e)
            |--> Optional<T> findById(Id id)
            |--> Iterable<T> findAll()
            |--> void deleteById(Id id)
            |--> void deleteAll()
            |--> long count()
            |
   interface PagingAndSortingRepository<T,ID>
            |
            |--> Page<T> findAll(Pageable pageable)
            |--> Iterable<T> findAll(Sort sort)
            |
   interface JpaRepository<T, ID>
            |
            |
            |
            |



    Pageable 
    Page 
    Sort 

        - new Sort.Order(Direction.DESC, "name")
        - Sort.by(Direction.DESC, "name")

    Direction 
    Order 


    - Query Methods 
    - QueryDSL






        CrudRepository
            |
        ProductRepository




            price >= x          findAllByPriceGreaterThan(price price)  or custom methods with @Query annotation
            price <= x          ///xxx
            price != x          //xxx
            price == x 
            ..
            ..
            ....
            ..
            ..


Controller class 
    - to handle the requests 


@RestController                 @Controller 

@ResponseBody 



Employee 
    - id, name, city, salary 

    GET         : http://localhost:8080/employees 
                    - return all the employees in json format as a response 

    GET         : http://localhost:8080/employees/1
                    - return an employee with given id 

    POST        : http://localhost:8080/employees
                    {
                        name : "xxxx",              //required, min 5 letters
                        city : "xxxx",              //required
                        salary : xxxx               //required, only positive number 
                    }
    PUT         : http://localhost:8080/employees/17
                    {
                        name : "xxxx", 
                        city : "xxxx", 
                        salary : xxxx
                    }

    DELETE      : http://localhost:8080/employees/1
                    - delete the given employee 